// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Poll matches snapshot with no user logged in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Poll
    ifVoted={false}
    isContributor={false}
    selectedOption="option1"
    storeIfVoted={[Function]}
    storeOption1Tally={[Function]}
    storeOption2Tally={[Function]}
    userId=""
    value="yes"
    voteBtnDisabled={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="poll-title"
>
          Should the blocksize be increased?
</h3>,
        <p
          className="vote-warning-text"
>
          You must be signed in and have contributed to the Bitcoin repo in order to vote.
</p>,
      ],
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Should the blocksize be increased?",
          "className": "poll-title",
        },
        "ref": null,
        "rendered": "Should the blocksize be increased?",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "You must be signed in and have contributed to the Bitcoin repo in order to vote.",
          "className": "vote-warning-text",
        },
        "ref": null,
        "rendered": "You must be signed in and have contributed to the Bitcoin repo in order to vote.",
        "type": "p",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="poll-title"
>
            Should the blocksize be increased?
</h3>,
          <p
            className="vote-warning-text"
>
            You must be signed in and have contributed to the Bitcoin repo in order to vote.
</p>,
        ],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Should the blocksize be increased?",
            "className": "poll-title",
          },
          "ref": null,
          "rendered": "Should the blocksize be increased?",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "You must be signed in and have contributed to the Bitcoin repo in order to vote.",
            "className": "vote-warning-text",
          },
          "ref": null,
          "rendered": "You must be signed in and have contributed to the Bitcoin repo in order to vote.",
          "type": "p",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "disableLifecycleMethods": true,
    "hydrateIn": undefined,
  },
}
`;

exports[`Poll matches snapshot with user logged in and contributor 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Poll
    ifVoted={false}
    isContributor={true}
    selectedOption="option1"
    storeIfVoted={[Function]}
    storeOption1Tally={[Function]}
    storeOption2Tally={[Function]}
    userId="23432"
    value="yes"
    voteBtnDisabled={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="poll-title"
>
          Should the blocksize be increased?
</h3>,
        <div>
          <Connect(Options) />
          <div>
                    <button
                              className="submit-btn"
                              disabled={false}
                              type="submit"
                    >
                              Vote
                    </button>
          </div>
</div>,
      ],
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Should the blocksize be increased?",
          "className": "poll-title",
        },
        "ref": null,
        "rendered": "Should the blocksize be increased?",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(Options) />,
            <div>
              <button
                            className="submit-btn"
                            disabled={false}
                            type="submit"
              >
                            Vote
              </button>
</div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <button
                className="submit-btn"
                disabled={false}
                type="submit"
>
                Vote
</button>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Vote",
                "className": "submit-btn",
                "disabled": false,
                "type": "submit",
              },
              "ref": null,
              "rendered": "Vote",
              "type": "button",
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="poll-title"
>
            Should the blocksize be increased?
</h3>,
          <div>
            <Connect(Options) />
            <div>
                        <button
                                    className="submit-btn"
                                    disabled={false}
                                    type="submit"
                        >
                                    Vote
                        </button>
            </div>
</div>,
        ],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Should the blocksize be increased?",
            "className": "poll-title",
          },
          "ref": null,
          "rendered": "Should the blocksize be increased?",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(Options) />,
              <div>
                <button
                                className="submit-btn"
                                disabled={false}
                                type="submit"
                >
                                Vote
                </button>
</div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <button
                  className="submit-btn"
                  disabled={false}
                  type="submit"
>
                  Vote
</button>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Vote",
                  "className": "submit-btn",
                  "disabled": false,
                  "type": "submit",
                },
                "ref": null,
                "rendered": "Vote",
                "type": "button",
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "disableLifecycleMethods": true,
    "hydrateIn": undefined,
  },
}
`;

exports[`Poll matches snapshot with user logged in and not voted 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Poll
    ifVoted={false}
    isContributor={false}
    selectedOption="option1"
    storeIfVoted={[Function]}
    storeOption1Tally={[Function]}
    storeOption2Tally={[Function]}
    userId="23432"
    value="yes"
    voteBtnDisabled={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="poll-title"
>
          Should the blocksize be increased?
</h3>,
        <p
          className="vote-warning-text"
>
          You must be signed in and have contributed to the Bitcoin repo in order to vote.
</p>,
      ],
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Should the blocksize be increased?",
          "className": "poll-title",
        },
        "ref": null,
        "rendered": "Should the blocksize be increased?",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "You must be signed in and have contributed to the Bitcoin repo in order to vote.",
          "className": "vote-warning-text",
        },
        "ref": null,
        "rendered": "You must be signed in and have contributed to the Bitcoin repo in order to vote.",
        "type": "p",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="poll-title"
>
            Should the blocksize be increased?
</h3>,
          <p
            className="vote-warning-text"
>
            You must be signed in and have contributed to the Bitcoin repo in order to vote.
</p>,
        ],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Should the blocksize be increased?",
            "className": "poll-title",
          },
          "ref": null,
          "rendered": "Should the blocksize be increased?",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "You must be signed in and have contributed to the Bitcoin repo in order to vote.",
            "className": "vote-warning-text",
          },
          "ref": null,
          "rendered": "You must be signed in and have contributed to the Bitcoin repo in order to vote.",
          "type": "p",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "disableLifecycleMethods": true,
    "hydrateIn": undefined,
  },
}
`;

exports[`Poll matches snapshot with user logged in and voted 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Poll
    ifVoted={true}
    isContributor={true}
    selectedOption="option1"
    storeIfVoted={[Function]}
    storeOption1Tally={[Function]}
    storeOption2Tally={[Function]}
    userId="23432"
    value="yes"
    voteBtnDisabled={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          className="poll-title"
>
          Should the blocksize be increased?
</h3>,
        <div>
          <Connect(Component) />
          <p
                    className="thanks"
          >
                    Thanks for voting!
          </p>
</div>,
      ],
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Should the blocksize be increased?",
          "className": "poll-title",
        },
        "ref": null,
        "rendered": "Should the blocksize be increased?",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(Component) />,
            <p
              className="thanks"
>
              Thanks for voting!
</p>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Thanks for voting!",
              "className": "thanks",
            },
            "ref": null,
            "rendered": "Thanks for voting!",
            "type": "p",
          },
        ],
        "type": "div",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            className="poll-title"
>
            Should the blocksize be increased?
</h3>,
          <div>
            <Connect(Component) />
            <p
                        className="thanks"
            >
                        Thanks for voting!
            </p>
</div>,
        ],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Should the blocksize be increased?",
            "className": "poll-title",
          },
          "ref": null,
          "rendered": "Should the blocksize be increased?",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(Component) />,
              <p
                className="thanks"
>
                Thanks for voting!
</p>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Thanks for voting!",
                "className": "thanks",
              },
              "ref": null,
              "rendered": "Thanks for voting!",
              "type": "p",
            },
          ],
          "type": "div",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "disableLifecycleMethods": true,
    "hydrateIn": undefined,
  },
}
`;
